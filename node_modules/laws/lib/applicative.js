// Generated by LiveScript 1.2.0
/** ^
 * Copyright (c) 2013 Quildreen "Sorella" Motta <quildreen@gmail.com>
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation files
 * (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
(function(){
  var ref$, forAll, Int, identity, composition, homomorphism, interchange, out$ = typeof exports != 'undefined' && exports || this;
  ref$ = require('claire'), forAll = ref$.forAll, Int = ref$.data.Int;
  out$.identity = identity = function(f){
    var A;
    A = f();
    return forAll(Int).satisfy(function(a){
      return A.of(function(b){
        return b;
      }).ap(A.of(a)).isEqual(A.of(a));
    });
  };
  out$.composition = composition = function(f){
    var A;
    A = f();
    return forAll(Int).satisfy(function(a){
      var g, h, x, y;
      g = (function(it){
        return it * 2;
      });
      h = (function(it){
        return it - 1;
      });
      x = A.of(function(f){
        return function(g){
          return function(x){
            return f(g(x));
          };
        };
      }).ap(A.of(g)).ap(A.of(h)).ap(A.of(a));
      y = A.of(g).ap(A.of(h).ap(A.of(a)));
      return x.isEqual(y);
    });
  };
  out$.homomorphism = homomorphism = function(f){
    var A;
    A = f();
    return forAll(Int).satisfy(function(a){
      var g;
      g = (function(it){
        return it * 2;
      });
      return A.of(g).ap(A.of(a)).isEqual(A.of(g(a)));
    });
  };
  out$.interchange = interchange = function(f){
    var A;
    A = f();
    return forAll(Int).satisfy(function(a){
      var g;
      g = (function(it){
        return it * 2;
      });
      return A.of(g).ap(A.of(a)).isEqual(A.of(function(f){
        return f(a);
      }).ap(A.of(g)));
    });
  };
}).call(this);
